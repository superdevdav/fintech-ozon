package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fintech-app/graph/model"
	"fmt"
	"log"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {

	post := &model.Post{
		Title:               input.Title,
		Description:         input.Description,
		Author:              &model.User{ID: input.AuthorID},
		URL:                 input.URL,
		Comments:            []*model.Comment{},
		CreatedAt:           getCurrentTime(),
		PermissionToComment: input.PermissionToComment,
	}

	// Добавление записи в БД
	err := r.PostStore.PostRepository().AddPost(post)
	if err != nil {
		log.Printf("Ошибка при добавлении поста: %v", err)
		return nil, err
	}

	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment, PermissionToComment bool) (*model.Comment, error) {
	// Проверка на разрешение комментирования поста
	if PermissionToComment {
		comment := &model.Comment{
			ID:          generateID(),
			Description: input.Description,
			Author:      &model.User{ID: input.AuthorID},
			CreatedAt:   getCurrentTime(),
		}

		// Добавление комментария в бд
		err := r.CommentStore.CommentsRepository().AddComment(comment, input.PostID)
		if err != nil {
			log.Printf("Ошибка при добавлении комментария: %v", err)
			return nil, err
		}
		return comment, nil
	} else {
		log.Printf("The author has prohibited commenting on this post")
		return nil, fmt.Errorf("the author has prohibited commenting on this post")
	}
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	defaultLimit := 10
	defaultOffset := 0

	if limit == nil {
		limit = &defaultLimit
	}
	if offset == nil {
		offset = &defaultOffset
	}

	posts, err := r.PostStore.PostRepository().GetAllPosts(*limit, *offset)
	if err != nil {
		log.Printf("Ошибка при получении постов: %v", err)
		return nil, err
	}
	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
