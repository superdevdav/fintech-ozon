package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fintech-app/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post := &model.Post{
		ID:          generateID(),
		Title:       input.Title,
		Description: input.Description,
		Author:      &model.User{ID: input.AuthorID},
		URL:         input.URL,
		Comments:    []*model.Comment{},
		CreatedAt:   getCurrentTime(),
		Edit:        input.Edit,
	}
	r.posts = append(r.posts, post)
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	comment := &model.Comment{
		ID:          generateID(),
		Description: input.Description,
		Author:      &model.User{ID: input.AuthorID},
		CreatedAt:   getCurrentTime(),
	}
	r.comments = append(r.comments, comment)
	return comment, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
